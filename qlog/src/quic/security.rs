use serde::{Deserialize, Serialize};

use super::KeyType;
use crate::HexString;

/// The key_updated event has Base importance level; see Section 9.2 of
/// [QLOG-MAIN]
///
/// [QLOG-MAIN]: https://datatracker.ietf.org/doc/html/draft-ietf-quic-qlog-main-schema-09
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
#[serde_with::skip_serializing_none]
pub struct KeyUpdated {
    pub key_type: KeyType,
    pub old: Option<HexString>,
    pub new: Option<HexString>,

    /// needed for 1RTT key updates
    pub key_phase: u64,
    pub trigger: Option<KeyUpdatedTrigger>,
}
#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq, Eq)]
#[serde(rename_all = "snake_case")]
pub enum KeyUpdatedTrigger {
    /// (e.g., initial, handshake and 0-RTT keys
    /// are generated by TLS)
    Tls,
    RemoteUpdate,
    LocalUpdate,
}

/// The key_discarded event has Base importance level; see Section 9.2 of
/// [QLOG-MAIN].
///
/// [QLOG-MAIN]: https://datatracker.ietf.org/doc/html/draft-ietf-quic-qlog-main-schema-09
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
#[serde_with::skip_serializing_none]
pub struct KeyDiscarded {
    pub key_type: KeyType,
    pub key: Option<HexString>,

    /// needed for 1RTT key updates
    pub key_phase: u64,
    pub trigger: Option<KeyDiscardedTrigger>,
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq, Eq)]
#[serde(rename_all = "snake_case")]
pub enum KeyDiscardedTrigger {
    /// (e.g., initial, handshake and 0-RTT keys
    /// are generated by TLS)
    Tls,
    RemoteUpdate,
    LocalUpdate,
}
