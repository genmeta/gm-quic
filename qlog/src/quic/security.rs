use derive_builder::Builder;
use serde::{Deserialize, Serialize};

use super::KeyType;
use crate::HexString;

/// The key_updated event has Base importance level; see Section 9.2 of
/// [QLOG-MAIN]
///
/// [QLOG-MAIN]: https://datatracker.ietf.org/doc/html/draft-ietf-quic-qlog-main-schema-09
#[serde_with::skip_serializing_none]
#[derive(Builder, Debug, Clone, Serialize, Deserialize, PartialEq)]
#[builder(setter(into, strip_option), build_fn(private, name = "fallible_build"))]
pub struct KeyUpdated {
    key_type: KeyType,
    #[builder(default)]
    old: Option<HexString>,
    #[builder(default)]
    new: Option<HexString>,

    /// needed for 1RTT key updates
    key_phase: u64,
    #[builder(default)]
    trigger: Option<KeyUpdatedTrigger>,
}
#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq, Eq)]
#[serde(rename_all = "snake_case")]
pub enum KeyUpdatedTrigger {
    /// (e.g., initial, handshake and 0-RTT keys
    /// are generated by TLS)
    Tls,
    RemoteUpdate,
    LocalUpdate,
}

/// The key_discarded event has Base importance level; see Section 9.2 of
/// [QLOG-MAIN].
///
/// [QLOG-MAIN]: https://datatracker.ietf.org/doc/html/draft-ietf-quic-qlog-main-schema-09
#[serde_with::skip_serializing_none]
#[derive(Builder, Debug, Clone, Serialize, Deserialize, PartialEq)]
#[builder(setter(into, strip_option), build_fn(private, name = "fallible_build"))]
pub struct KeyDiscarded {
    key_type: KeyType,
    #[builder(default)]
    key: Option<HexString>,

    /// needed for 1RTT key updates
    key_phase: u64,
    #[builder(default)]
    trigger: Option<KeyDiscardedTrigger>,
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq, Eq)]
#[serde(rename_all = "snake_case")]
pub enum KeyDiscardedTrigger {
    /// (e.g., initial, handshake and 0-RTT keys
    /// are generated by TLS)
    Tls,
    RemoteUpdate,
    LocalUpdate,
}

crate::gen_builder_method! {
    KeyUpdatedBuilder   => KeyUpdated;
    KeyDiscardedBuilder => KeyDiscarded;
}
